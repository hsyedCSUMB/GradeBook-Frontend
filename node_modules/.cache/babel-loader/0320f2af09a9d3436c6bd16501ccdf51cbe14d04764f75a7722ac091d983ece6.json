{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Haider\\\\Desktop\\\\GradeBook Frontend\\\\src\\\\components\\\\GradeAssignment.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { SERVER_URL } from '../constants';\n\n//  required properties -  assignmentId\n//  \nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GradeAssignment() {\n  _s();\n  const [grades, setGrades] = useState([]);\n  let assignmentId = 0;\n  const [message, setMessage] = useState('');\n  const path = window.location.pathname; // /gradebook/123\n  const s = /\\d+$/.exec(path)[0];\n  console.log(\"Grade assignmentId=\" + s);\n  assignmentId = s;\n  useEffect(() => {\n    fetchGrades();\n  }, []);\n  const fetchGrades = () => {\n    setMessage('');\n    console.log(\"fetchGrades \" + assignmentId);\n    fetch(`${SERVER_URL}/gradebook/${assignmentId}`).then(response => response.json()).then(data => {\n      setGrades(data);\n    }).catch(err => {\n      setMessage(\"Exception. \" + err);\n      console.error(\"fetch grades error \" + err);\n    });\n  };\n\n  // when submit button pressed, send updated grades to back end \n  //  and then fetch the new grades.\n  const saveGrades = () => {\n    setMessage('');\n    console.log(\"Gradebook.save \");\n    fetch(`${SERVER_URL}/gradebook/${assignmentId}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(grades)\n    }).then(res => {\n      if (res.ok) {\n        fetchGrades(assignmentId);\n        setMessage(\"Grades saved.\");\n      } else {\n        setMessage(\"Save error. \" + res.status);\n        console.error('Save grades error =' + res.status);\n      }\n    }).catch(err => {\n      setMessage(\"Exception. \" + err);\n      console.error('Save grades exception =' + err);\n    });\n  };\n  const onChangeInput = (e, row_id) => {\n    setMessage('');\n    console.log(\"onChangeInput \" + row_id);\n    // grade value must be digts only. \n    if (/^\\d*$/.test(e.target.value)) {\n      const editData = grades.map((row, idx) => row_id === idx ? {\n        ...row,\n        grade: e.target.value\n      } : row);\n      setGrades(editData);\n    } else {\n      setMessage(\"Grades are digits only!\");\n    }\n  };\n  const headers = ['Name', 'Email', 'Grade'];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Assignment Grades\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      margin: \"auto\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        id: \"gmessage\",\n        children: [message, \"\\xA0\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"Center\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: headers.map((title, idx) => /*#__PURE__*/_jsxDEV(\"th\", {\n              children: title\n            }, idx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 47\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: grades.map((row, idx) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: row.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: row.email\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                name: \"grade\",\n                value: row.grade ? row.grade : \"\",\n                type: \"text\",\n                onChange: e => onChangeInput(e, idx)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 19\n            }, this)]\n          }, idx, true, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"sgrade\",\n        type: \"button\",\n        margin: \"auto\",\n        onClick: saveGrades,\n        children: \"Save Grades\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 7\n  }, this);\n}\n_s(GradeAssignment, \"21Brfn1rJYlXW74fvh4sNF1kJlU=\");\n_c = GradeAssignment;\nexport default GradeAssignment;\nvar _c;\n$RefreshReg$(_c, \"GradeAssignment\");","map":{"version":3,"names":["React","useState","useEffect","SERVER_URL","jsxDEV","_jsxDEV","GradeAssignment","_s","grades","setGrades","assignmentId","message","setMessage","path","window","location","pathname","s","exec","console","log","fetchGrades","fetch","then","response","json","data","catch","err","error","saveGrades","method","headers","body","JSON","stringify","res","ok","status","onChangeInput","e","row_id","test","target","value","editData","map","row","idx","grade","children","fileName","_jsxFileName","lineNumber","columnNumber","margin","id","className","title","name","email","type","onChange","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Haider/Desktop/GradeBook Frontend/src/components/GradeAssignment.js"],"sourcesContent":["import React, {useState, useEffect}  from 'react';\nimport {SERVER_URL} from '../constants';\n\n\n//  required properties -  assignmentId\n//  \n\nfunction GradeAssignment ( ) {\n  \n  const [grades, setGrades] = useState([]);\n  let assignmentId=0;\n  const [message, setMessage] = useState('');\n\n  const path = window.location.pathname;  // /gradebook/123\n  const s = /\\d+$/.exec(path)[0];\n  console.log(\"Grade assignmentId=\"+s);\n  assignmentId=s;\n\n  useEffect(() => {\n    fetchGrades()\n   }, [] )\n\n \n  const fetchGrades = ( ) => {\n      setMessage('');\n      console.log(\"fetchGrades \"+assignmentId);\n      fetch(`${SERVER_URL}/gradebook/${assignmentId}`)\n      .then((response) => response.json()) \n      .then((data) => { setGrades(data) })        \n      .catch(err => { \n        setMessage(\"Exception. \"+err);\n        console.error(\"fetch grades error \"+ err);\n      });\n    }\n  \n    // when submit button pressed, send updated grades to back end \n    //  and then fetch the new grades.\n    const saveGrades = ( ) => {\n      setMessage(''); \n      console.log(\"Gradebook.save \");     \n      fetch(`${SERVER_URL}/gradebook/${assignmentId}` , \n          {  \n            method: 'PUT', \n            headers: { 'Content-Type': 'application/json', }, \n            body: JSON.stringify( grades )\n          } )\n      .then(res => {\n          if (res.ok) {\n            fetchGrades(assignmentId);\n            setMessage(\"Grades saved.\");\n          } else {\n            setMessage(\"Save error. \"+res.status);\n            console.error('Save grades error =' + res.status);\n      }})\n        .catch(err => {\n            setMessage(\"Exception. \"+err);\n            console.error('Save grades exception =' + err);\n        });\n   };        \n    \n\n    const onChangeInput = (e, row_id) => {\n      setMessage('');\n      console.log(\"onChangeInput \"+row_id);\n      // grade value must be digts only. \n      if ( /^\\d*$/.test(e.target.value) ) {\n        const editData = grades.map((row, idx) =>\n          row_id === idx ? { ...row, grade: e.target.value } : row\n        );\n        setGrades( editData);\n      } else {\n        setMessage(\"Grades are digits only!\");\n      }\n    }\n \n    const headers = ['Name', 'Email', 'Grade'];\n\n    return (\n      <div>\n        <h3>Assignment Grades</h3>\n        <div margin=\"auto\" >\n          <h4 id=\"gmessage\" >{message}&nbsp;</h4>\n          <table className=\"Center\"> \n            <thead>\n              <tr>\n                {headers.map((title, idx) => (<th key={idx}>{title}</th>))}\n              </tr>\n            </thead>\n            <tbody>\n              {grades.map((row,idx) => (\n                <tr key={idx}>\n                  <td>{row.name}</td>\n                  <td>{row.email}</td>\n                  <td>\n                  <input\n                      name=\"grade\"\n                      value={(row.grade)? row.grade : \"\"}  \n                      type=\"text\"\n                      onChange={(e) => onChangeInput(e, idx)}\n                  />\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n          <button id=\"sgrade\" type=\"button\" margin=\"auto\" onClick={saveGrades}>Save Grades</button>\n        </div>\n      </div>\n    )\n}\n\nexport default GradeAssignment;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}